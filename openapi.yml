openapi: 3.0.0
info:
  title: webkansu-backend
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
    description: dev

paths:
  /api/auth:
    post:
      operationId: "registerUser"
      description: "ユーザー登録をする。"
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      responses:
        '200':
          description: "この時のレスポンスヘッダーをリクエストヘッダーに含めると、認証が必要なリクエストができる。"
          headers:
            Token-Type:
              schema:
                type: string
            Uid:
              schema:
                type: string
            Client:
              schema:
                type: string
            Access-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/auth/sign_in:
    post:
      operationId: "signIn"
      description: "ログインする。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequestBody"
      responses:
        '200':
          description: "この時のレスポンスヘッダーをリクエストヘッダーに含めると、認証が必要なリクエストができる。"
          headers:
            Token-Type:
              schema:
                type: string
            Uid:
              schema:
                type: string
            Client:
              schema:
                type: string
            Access-Token:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/user:
    get:
      operationId: "getCurrentUser"
      description: "ログインしているユーザーの情報を返す。"
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/user/novels:
    get:
      operationId: "listNovels"
      description: "読んだ小説の一覧を返す。"
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Novel"
    post:
      operationId: "createNovel"
      description: "小説を追加する。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Novel"
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Novel"

  /api/user/novels/find:
    get:
      operationId: "getNovelBySlug"
      description: "slug から読んだことのある小説と最後に読んだ位置を返す。"
      parameters:
        - in: query
          name: provider
          required: true
          schema: 
            $ref: "#/components/schemas/NovelProvider"
        - in: query
          name: slug
          required: true
          description: "`n0123ab` などのprovider のサービス内で、小説の URL を組み立てるための文字列。"
          schema:
            type: string
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Novel"

  /api/user/novels/{id}/bookmark:
    post:
      operationId: "createBookmark"
      description: "しおりを作成する。"
      parameters:
        - in: path
          name: id
          required: true
          description: "小説のid。"
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bookmark"
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookmark"

components:
  schemas:
    SignInRequestBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    User:
      type: object
      required:
        - id
        - uid
        - email
        - password
        - password_confirmation
      properties:
        id:
          type: integer
          readOnly: true
        uid:
          type: string
          readOnly: true
        email:
          type: string
        password:
          type: string
          writeOnly: true
        password_confirmation:
          type: string
          writeOnly: true

    NovelProvider:
      description: "小説が掲載されているサービスを表す。"
      type: string
      enum:
        - narou

    Novel:
      type: object
      required:
        - id
        - title
        - author_name
        - provider
        - slug
      properties:
        id:
          type: integer
          readOnly: true
        title:
          description: "小説のタイトル。"
          type: string
        author_name:
          description: "小説の著者名。"
          type: string
        provider:
          $ref: "#/components/schemas/NovelProvider"
        slug:
          description: "`n0123ab` などのprovider のサービス内で、小説の URL を組み立てるための文字列。"
          type: string
        bookmark:
          description: "しおりの位置を表す。"
          nullable: true
          readOnly: true
          oneOf:
            - $ref: "#/components/schemas/Bookmark"

    Bookmark:
      type: object
      required:
        - slug
        - position
        - title
        - updated_at
      properties:
        slug:
          description: "チャプターの URL を組み立てるための文字列。`/n0123ab/1/`の `1` にあたる。"
          type: string
        position:
          description: "スクロール位置を表す文字列。HTML の id 属性の値などが入る。"
          type: string
        title:
          description: "チャプターのタイトル。"
          type: string
        updated_at:
          description: "しおりの更新日時。"
          type: string
          format: date-time
          readOnly: true
